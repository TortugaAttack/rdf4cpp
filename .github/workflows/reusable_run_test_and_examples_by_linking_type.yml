on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      compiler:
        required: true
        type: string
      cmake-version:
        required: true
        type: string
      build-shared-libs:
        required: true
        type: boolean
      with-coverage:
        type: boolean
      with-sanitizer:
        type: boolean
      with-Werror:
        type: boolean
      with-AVX:
        type: boolean
    secrets:
      coverall-token:
        description: 'Access token for coverall. Required if inputs.with-coverage'
        required: false

jobs:
  tests-and-examples:
    name: ${{ fromJSON('["static", "shared"]')[inputs.build-shared-libs] }} lib${{ fromJSON('["", " + sanitizers"]')[inputs.with-sanitizer] }}${{ fromJSON('["", " + code coverage"]')[inputs.with-coverage] }}${{ fromJSON('["", " + AVX"]')[inputs.with-AVX] }}
    runs-on: ${{ inputs.os }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Add Repos for for gcc-13 and clang-17
        uses: dice-group/cpp-conan-release-reusable-workflow/.github/actions/setup_apt@feature/conan2_utils

      - name: Ensure stdlib version
        run: |
          sudo apt install libstdc++-13-dev -y

      - name: Get minimum cmake version
        uses: lukka/get-cmake@v3.29.3
        with:
          cmakeVersion: ${{ inputs.cmake-version }}

      - name: Install compiler
        id: install_cc
        uses: rlalik/setup-cpp-compiler@v1.2
        with:
          compiler: ${{ inputs.compiler }}

      - name: use mold as default linker
        uses: rui314/setup-mold@v1

      # Checks if the compiler on the CI
      # has the instruction sets enabled we expect to be enabled for testing
      # I.e. inputs.with-AVX <-> compiler has avx
      - name: Check AVX
        env:
          CC: ${{ steps.install_cc.outputs.cc }}
          CXX: ${{ steps.install_cc.outputs.cxx }}
        run: |
          echo 'int main() { return __AVX2__; }' > /tmp/rdf4cpp-avx-test.cpp
          
          AVX_EXISTS=$(${CXX} ${{ fromJSON('["", "-march=native"]')[inputs.with-AVX] }} -o /dev/null /tmp/rdf4cpp-avx-test.cpp > /dev/null 2>&1; test $? -eq 0; echo $?)
          AVX_SHOULD_EXIST=${{ fromJSON('["1", "0"]')[inputs.with-AVX] }}
          
          # Shell: true=zero-exit, false=non-zero-exit
          echo "AVX exists: $AVX_EXISTS"
          echo "AVX should exist: $AVX_SHOULD_EXIST"
          
          test $AVX_EXISTS -eq $AVX_SHOULD_EXIST

      - name: Configure conan
        uses: dice-group/cpp-conan-release-reusable-workflow/.github/actions/configure_conan@feature/conan2_utils
        with:
          conan-version: 2.3.1

      - name: add conan user
        run: |
          conan remote add -f dice-group https://conan.dice-research.org/artifactory/api/conan/tentris

      - name: Cache conan data
        id: cache-conan
        uses: actions/cache@v4.0.2
        with:
          path: ~/.conan2/p
          key: ${{ inputs.os }}-${{ inputs.compiler }}-conan2${{ fromJSON('["", "-coverage"]')[inputs.with-coverage] }}${{ fromJSON('["", "-sanitizer"]')[inputs.with-sanitizer] }}${{ fromJSON('["", "-avx"]')[inputs.with-avx] }}

      - name: Check out sources
        uses: actions/checkout@v3

      - name: Get dependency provider
        uses: dice-group/cpp-conan-release-reusable-workflow/.github/actions/add_conan_provider@feature/conan2_utils

      - name: Configure CMake
        env:
          CC: ${{ steps.install_cc.outputs.cc }}
          CXX: ${{ steps.install_cc.outputs.cxx }}
          CXXFLAGS: -Wno-unused-command-line-argument -fuse-ld=mold ${{ fromJSON('["", "-fsanitize=undefined -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls"]')[inputs.with-sanitizer] }} ${{ fromJSON('["", "--coverage"]')[inputs.with-coverage] }} ${{ fromJSON('["", "-Werror"]')[inputs.with-Werror] }} ${{ fromJSON('["", "-march=native"]')[inputs.with-AVX] }}
        run: >
          cmake -G Ninja -B build_dir -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DBUILD_EXAMPLES=ON -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=conan_provider.cmake
          ${{ fromJSON('["", "-DBUILD_SHARED_LIBS=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON"]')[inputs.build-shared-libs] }}

      - name: Build Tests & Examples
        working-directory: build_dir
        run: cmake --build . --parallel 2

      - name: Run tests
        working-directory: build_dir
        run: ctest --parallel 2 --verbose

      - name: Report coverage
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.coverall-token }}
        if: inputs.with-coverage
        run: |
          gcovr --gcov-executable gcov-13 --coveralls --filter 'src/' -o coverage.json -r ./
          curl -F "json_file=@coverage.json" https://coveralls.io/api/v1/jobs

      - name: Run examples
        working-directory: build_dir
        run: |
          cd examples
          for example in *_example; do 
            echo "executing ${example}"
            ./${example}
          done
