on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      compiler:
        required: true
        type: string
      cmake-version:
        required: true
        type: string
      build-shared-libs:
        required: true
        type: boolean
      with-coverage:
        type: boolean
      with-sanitizer:
        type: boolean
    secrets:
      coverall-token:
        description: 'Access token for coverall. Required if inputs.with-coverage'
        required: false


jobs:
  tests-and-examples:
    name: ${{ fromJSON('["static", "shared"]')[inputs.build-shared-libs] }} lib${{ fromJSON('["", " + sanitizers"]')[inputs.with-sanitizer] }}${{ fromJSON('["", " + code coverage"]')[inputs.with-coverage] }}
    runs-on: ${{ inputs.os }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Get minimum cmake version
        uses: lukka/get-cmake@v3.24.3
        with:
          cmakeVersion: ${{ inputs.cmake-version }}

      - name: Install compiler
        id: install_cc
        uses: rlalik/setup-cpp-compiler@v1.2
        with:
          compiler: ${{ inputs.compiler }}

      - name: use mold as default linker
        uses: rui314/setup-mold@v1

      - name: Configure conan
        env:
          CC: ${{ steps.install_cc.outputs.cc }}
          CXX: ${{ steps.install_cc.outputs.cxx }}
        run: |
          pip3 install "conan==1.59" ${{ fromJSON('["", "gcovr"]')[inputs.with-coverage] }}
          conan user
          conan profile new --detect default
          conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: Cache conan data
        id: cache-conan
        uses: actions/cache@v3
        with:
          path: ~/.conan/data
          key: ${{ inputs.os }}-${{ inputs.compiler }}-conan

      - name: Check out sources
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}

      - name: Build Tests & Examples
        run: |
          cmake -G Ninja -B build_dir -DBUILD_TESTING=ON -DBUILD_EXAMPLES=ON \
          ${{ fromJSON('["", "-DBUILD_SHARED_LIBS=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON"]')[inputs.build-shared-libs] }}
          cmake --build build_dir
        env:
          CC: ${{ steps.install_cc.outputs.cc }}
          CXX: ${{ steps.install_cc.outputs.cxx }}
          CXXFLAGS: ${{ fromJSON('["", "-fsanitize=address -fsanitize=undefined -fno-omit-frame-pointer -Wno-unused-command-line-argument -fuse-ld=lld"]')[inputs.with-sanitizer] }} ${{ fromJSON('["", "--coverage"]')[inputs.with-coverage] }}

      - name: Run tests
        working-directory: build_dir
        run: |
          ctest --parallel 2 --verbose

      - name: Report coverage
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.coverall-token }}
        if: inputs.with-coverage
        run: |
          gcovr --gcov-executable gcov-12 --coveralls --filter 'src/' -o coverage.json -r ./
          cat coverage.json
          curl -F "json_file=@coverage.json" https://coveralls.io/api/v1/jobs

      - name: Run examples
        working-directory: build_dir
        run: |
          for example in examples/*_example 
          do 
          echo "executing ${example}"
          ./${example}
          done