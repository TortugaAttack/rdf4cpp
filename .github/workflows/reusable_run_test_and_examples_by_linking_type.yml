on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      compiler:
        required: true
        type: string
      cmake-version:
        required: true
        type: string
      build-shared-libs:
        required: true
        type: boolean
      with-coverage:
        type: boolean
      with-sanitizer:
        type: boolean
      with-Werror:
        type: boolean
    secrets:
      coverall-token:
        description: 'Access token for coverall. Required if inputs.with-coverage'
        required: false

jobs:
  tests-and-examples:
    name: ${{ fromJSON('["static", "shared"]')[inputs.build-shared-libs] }} lib${{ fromJSON('["", " + sanitizers"]')[inputs.with-sanitizer] }}${{ fromJSON('["", " + code coverage"]')[inputs.with-coverage] }}
    runs-on: ${{ inputs.os }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Add Repos for for gcc-13 and clang-16
        run: |
          # gcc-13
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          
          # clang-16
          source /etc/os-release
          echo "deb http://apt.llvm.org/${UBUNTU_CODENAME}/ llvm-toolchain-${UBUNTU_CODENAME}-16 main" | sudo tee /etc/apt/sources.list.d/llvm-16.list
          curl https://apt.llvm.org/llvm-snapshot.gpg.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/llvm-16.gpg > /dev/null
          
          sudo apt-get update -y

      - name: Get minimum cmake version
        uses: lukka/get-cmake@v3.24.3
        with:
          cmakeVersion: ${{ inputs.cmake-version }}

      - name: Install compiler
        id: install_cc
        uses: rlalik/setup-cpp-compiler@v1.2
        with:
          compiler: ${{ inputs.compiler }}

      - name: use mold as default linker
        uses: rui314/setup-mold@v1

      - name: Configure conan
        run: |
          pip3 install "conan==1.60.1" ${{ fromJSON('["", "gcovr"]')[inputs.with-coverage] }}
          conan profile new --detect default
          conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: Cache conan data
        id: cache-conan
        uses: actions/cache@v3
        with:
          path: ~/.conan/data
          key: ${{ inputs.os }}-${{ inputs.compiler }}-conan

      - name: Check out sources
        uses: actions/checkout@v3

      - name: Configure CMake
        env:
          CC: ${{ steps.install_cc.outputs.cc }}
          CXX: ${{ steps.install_cc.outputs.cxx }}
          CXXFLAGS: -Wno-unused-command-line-argument -fuse-ld=mold ${{ fromJSON('["", "-fsanitize=undefined -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls"]')[inputs.with-sanitizer] }} ${{ fromJSON('["", "--coverage"]')[inputs.with-coverage] }} ${{ fromJSON('["", "-Werror"]')[inputs.with-Werror] }}
        run: >
          cmake -G Ninja -B build_dir -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -DBUILD_EXAMPLES=ON
          ${{ fromJSON('["", "-DBUILD_SHARED_LIBS=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON"]')[inputs.build-shared-libs] }}

      - name: Build Tests & Examples
        working-directory: build_dir
        run: cmake --build . --parallel 2

      - name: Run tests
        working-directory: build_dir
        run: ctest --parallel 2 --verbose

      - name: Report coverage
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.coverall-token }}
        if: inputs.with-coverage
        run: |
          gcovr --gcov-executable gcov-12 --coveralls --filter 'src/' -o coverage.json -r ./
          curl -F "json_file=@coverage.json" https://coveralls.io/api/v1/jobs

      - name: Run examples
        working-directory: build_dir
        run: |
          for example in examples/*_example; do 
            echo "executing ${example}"
            ./${example}
          done
