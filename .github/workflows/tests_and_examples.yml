name: Tests and Examples
on: [ 'push', 'pull_request' ]
jobs:
  test:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        config:
          #          - {
          #            name: "windows-latest",
          #            os: windows-latest,
          #          }
          #          - {
          #            name: "macos-latest",
          #            os: macos-latest,
          #          }
          # - { #std::from_chars is not implemented correctly in gcc-10
          #   name: "ubuntu-22.04 g++-10 libstdc++-11",
          #   os: ubuntu-22.04,
          #   cc: "gcc-10",
          #   cxx: "g++-10",
          # }
          - {
            name: "ubuntu-22.04 g++-11  libstdc++-11",
            os: ubuntu-22.04,
            cc: "gcc-11",
            cxx: "g++-11",
          }
          - {
            name: "ubuntu-22.04 clang++-12 libstdc++-11",
            os: ubuntu-22.04,
            cc: "clang-12",
            cxx: "clang++-12",
          }
          - {
            name: "ubuntu-22.04 clang++-13 libstdc++-11",
            os: ubuntu-22.04,
            cc: "clang-13",
            cxx: "clang++-13",
          }
          - {
            name: "ubuntu-22.04 clang++-14 libstdc++-11",
            os: ubuntu-22.04,
            cc: "clang-14",
            cxx: "clang++-14",
          }
    steps:
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: choco install cmake ninja
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: brew install cmake ninja
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null \
            | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
          sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main'
          sudo apt-get update
          sudo apt-get install cmake ninja-build python3 python3-pip curl clang-11
          sudo pip install gcovr
          sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/${{ matrix.config.cxx }} 90
          sudo update-alternatives --config c++
          sudo update-alternatives --install /usr/bin/cc cc /usr/bin/${{ matrix.config.cc }} 90
          sudo update-alternatives --config cc
          sudo pip install conan
      - name: Enable Developer Command Prompt
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
      - name: Check out sources
        uses: actions/checkout@v2
      - name: Configure conan
        env:
          CXX: "/usr/bin/${{ matrix.config.cxx }}"
          CC: "/usr/bin/${{ matrix.config.cc }}"
        run: |
          conan user
          conan profile new --detect default
          conan profile update settings.compiler.libcxx=libstdc++11 default
      - name: Build Tests
        if: matrix.config.cxx == 'g++-11'
        run: |
          cmake -G Ninja -B build_tests -DBUILD_TESTING=ON -DCMAKE_CXX_FLAGS=--coverage -DBUILD_SHARED_LIBS=On
          cmake --build build_tests
      - name: Build Tests
        if: matrix.config.cxx != 'g++-11'
        run: |
          cmake -G Ninja -B build_tests -DBUILD_TESTING=ON -DBUILD_SHARED_LIBS=On
          cmake --build build_tests
      - name: Run tests
        run: |
          ctest --test-dir build_tests
      - name: Coverage
        if: matrix.config.cxx == 'g++-11'
        run: |
          gcovr --coveralls --filter 'src/' -o coverage.json -r ./
          curl -F "json_file=@coverage.json" https://coveralls.io/api/v1/jobs
      - name: Build Examples
        run: |
          cmake -G Ninja -B build_examples -DBUILD_EXAMPLES=ON -DBUILD_SHARED_LIBS=On
          cmake --build build_examples
      - name: Run Examples
        run: |
          cd build_examples
          examples/graphs_and_datasets_example
          examples/literal_datatypes_example
          examples/rdf_nodes_example
      - name: Test conan package
        env:
          CXX: "/usr/bin/${{ matrix.config.cxx }}"
          CC: "/usr/bin/${{ matrix.config.cc }}"
        run: |
          # build and test package
          conan remove -f $(conan inspect . --raw name)/$(conan inspect . --raw version)
          conan create . $(conan inspect . --raw name)/$(conan inspect . --raw version) -pr:b=default
      - name: Install systemlib serd and boost for FetchContent
        run: |
          # FetchContent does not handle transitive dependencies and doesn't run conan.
          sudo apt-get install libboost-math-dev
      - name: Test cmake FetchContent
        run: |
          cd test_FetchContent
          cmake -G Ninja -B build_fetch_content -DBUILD_SHARED_LIBS=On
          cmake --build build_fetch_content
